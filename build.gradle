ext.wifiDefineLine = "#define USE_WIFI"
ext.ethernetDefineLine = "#define USE_ETHERNET"
ext.masterConfigFilePath = "include/config/MasterConfig.hpp"

task switchToWifi {
    doLast {
        def masterConfigFile = new File(masterConfigFilePath)
        def masterConfigContent = masterConfigFile.text
        def newMasterConfigContent = masterConfigContent.replace(ethernetDefineLine, "// ${ethernetDefineLine}")
        newMasterConfigContent = newMasterConfigContent.replace("// ${wifiDefineLine}", wifiDefineLine)
        masterConfigFile.write(newMasterConfigContent)
        println "$masterConfigFilePath changed to:"
        println newMasterConfigContent
    }
}


task switchToEthernet {
    doLast {
        def masterConfigFile = new File(masterConfigFilePath)
        def masterConfigContent = masterConfigFile.text
        def newMasterConfigContent = masterConfigContent.replace(wifiDefineLine, "// ${wifiDefineLine}")
        newMasterConfigContent = newMasterConfigContent.replace("// ${ethernetDefineLine}", ethernetDefineLine)
        masterConfigFile.write(newMasterConfigContent)
        println "$masterConfigFilePath changed to:"
        println newMasterConfigContent
    }
}

task setNextVersion {
    ext.firmwareVersionPattern = ~/(?s).*#define FIRMWARE_VERSION\s+"(?<version>[^\s]+)"(?s).*/
    doLast {
        def currentVersionMatcher = firmwareVersionPattern.matcher(new File(masterConfigFilePath).text)
        currentVersionMatcher.matches()
        def currentVersion = currentVersionMatcher.group("version")
        println "currentVersion = $currentVersion"
        // major.minor.patch-(dev.number)-variant
        
        def versionPattern = ~/(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)\-(?<dev>dev\.(?<devnumber>\d+)\-)?(?<variant>(WIFI|Ethernet))/
        def detailedVersionMatcher = versionPattern.matcher(currentVersion)
        detailedVersionMatcher.matches()
        def currentMajor = detailedVersionMatcher.group("major")
        def currentMinor = detailedVersionMatcher.group("minor")
        def currentPatch = detailedVersionMatcher.group("patch")
        def currentDev = detailedVersionMatcher.group("devnumber")
        def variant = detailedVersionMatcher.group("variant")
        def newMajor = currentMajor;
        def newMinor = currentMinor;
        def newPatch = currentPatch;
        def newDev = currentDev;
        def incrementer = project.versionIncrementer
        def stableRelease = false
        switch(incrementer) {
            case "major":
                newMajor = currentMajor.toInteger() + 1
                newMinor = 0
                newPatch = 0
                newDev = 1
                break
            case "minor":
                newMinor = currentMinor.toInteger() + 1
                newPatch = 0
                newDev = 1
                break
            case "patch":
                newPatch = currentPatch.toInteger() + 1
                newDev = 1
                break
            case "dev":
                if (!currentDev) {
                    throw new IllegalArgumentException("Cannot increment dev when no development has not been started first. " +
                                                       "Add '-PstartDevelopment' and use incrementer 'major', 'minor' or 'patch'.")
                }
                newDev = currentDev.toInteger() + 1
                break
            case "stable":
                stableRelease = true
                if (project.hasProperty("startDevelopment")) {
                    throw new IllegalArgumentException("Cannot do stable release and startDevelopment in the same time")
                }
                break;
        }
        def isDevelopment = (project.hasProperty("startDevelopment") || incrementer == "dev")
        def devPart = isDevelopment ? "dev.${newDev}-" : ""
        def newVersion = "${newMajor}.${newMinor}.${newPatch}-${devPart}$variant"
        println ("New version is $newVersion")
        // TODO put newVersion to file and tag on git
    }
}
