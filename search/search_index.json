{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aetas RoomHub 3 What is RoomHub Aetas RoomHub is gateway device for multiple wired electronic sensors and controllers, which are essential in creating smart home solution. RoomHub has been created to support multi-device, fully wired solution. RoomHub supports MQTT Homie convention and provides easy integration with home automation software like OpenHab and Home Assistant. Both RoomHub hardware and software are freely available under Open Source Licenses. What's the use case? Typical use case for RoomHub is house with sensors and controllers distributed all around with wired connections. It is possible to plug in simple and inexpensive devices, like relay modules, PIR motion sensors or just plain wall switches into RoomHub to make fully capable home automation system. What's next? Introduction Quick start Hardware","title":"Start"},{"location":"#aetas-roomhub-3","text":"","title":"Aetas RoomHub 3"},{"location":"#what-is-roomhub","text":"Aetas RoomHub is gateway device for multiple wired electronic sensors and controllers, which are essential in creating smart home solution. RoomHub has been created to support multi-device, fully wired solution. RoomHub supports MQTT Homie convention and provides easy integration with home automation software like OpenHab and Home Assistant. Both RoomHub hardware and software are freely available under Open Source Licenses.","title":"What is RoomHub"},{"location":"#whats-the-use-case","text":"Typical use case for RoomHub is house with sensors and controllers distributed all around with wired connections. It is possible to plug in simple and inexpensive devices, like relay modules, PIR motion sensors or just plain wall switches into RoomHub to make fully capable home automation system.","title":"What's the use case?"},{"location":"#whats-next","text":"Introduction Quick start Hardware","title":"What's next?"},{"location":"advanced/configuration-raw/","text":"Warning This section describes raw configuration format accepted by RoomHub firmware. This is usually needed only in development and for very early alpha versions of RoomHub firmware. You should use RoomHub Configurator for regular configuration. [TODO write about direct configuration format]","title":"Raw configuration"},{"location":"hardware/board-layout/","text":"RoomHub consists of two boards: Mainboard IO Board Mainboard Mainboard is home for the key components of the device. Most important element is DOIT Esp32 DevKit v1 microcontroller which controls other components and provides WiFi connection. Four 16-channel port expanders MCP23017 has been used to supply enough (64) digital input/output ports. Analog port has been expanded to provide 16 input port by 16-channel analog multiplexer. Digital ports and PJON (optionally) signals are going through level shifter to support communication with 5V devices (ESP32 is working with 3.3V). Analog input is directly connected to ESP32 ports so it should use maximum of 3.3V. IO Board As a name suggest IO Board is responsible for input and output. This task is fulfilled by sixteen RJ45 ports. Each port provides: power (+5V and GND) 4 digital input/output wires 1 analog input wire 1 PJON wire See wiring page to learn more about RJ45 ports and each wire role. Boards connection Boards are connected with IDC16 ribbon cables for digital and analog data. PJON connection between the boards with 3-pin cable. Additionally, 5V power is forwarded from IO board to mainboard by cables connected with screw terminals. Two boards design has been chosen to save costs on the future upgrades of the system. If there will be major upgrade of some components on the mainboard (e.g. ESP32 will be replaced by other microcontroller) it will be enough to replace mainboard to the new version and keep IO board. Similarly, in case of the IO board major change (e.g. replacing RJ45 ports with other standard), mainboard will not need to be replaced. [TODO detailed pins usage on the board and left pins]","title":"Board layout"},{"location":"hardware/board-layout/#mainboard","text":"Mainboard is home for the key components of the device. Most important element is DOIT Esp32 DevKit v1 microcontroller which controls other components and provides WiFi connection. Four 16-channel port expanders MCP23017 has been used to supply enough (64) digital input/output ports. Analog port has been expanded to provide 16 input port by 16-channel analog multiplexer. Digital ports and PJON (optionally) signals are going through level shifter to support communication with 5V devices (ESP32 is working with 3.3V). Analog input is directly connected to ESP32 ports so it should use maximum of 3.3V.","title":"Mainboard"},{"location":"hardware/board-layout/#io-board","text":"As a name suggest IO Board is responsible for input and output. This task is fulfilled by sixteen RJ45 ports. Each port provides: power (+5V and GND) 4 digital input/output wires 1 analog input wire 1 PJON wire See wiring page to learn more about RJ45 ports and each wire role.","title":"IO Board"},{"location":"hardware/board-layout/#boards-connection","text":"Boards are connected with IDC16 ribbon cables for digital and analog data. PJON connection between the boards with 3-pin cable. Additionally, 5V power is forwarded from IO board to mainboard by cables connected with screw terminals. Two boards design has been chosen to save costs on the future upgrades of the system. If there will be major upgrade of some components on the mainboard (e.g. ESP32 will be replaced by other microcontroller) it will be enough to replace mainboard to the new version and keep IO board. Similarly, in case of the IO board major change (e.g. replacing RJ45 ports with other standard), mainboard will not need to be replaced. [TODO detailed pins usage on the board and left pins]","title":"Boards connection"},{"location":"hardware/components/","text":"Bill of materials NAME AMOUNT DC Power Jack Plug Socket 2.1/5.5 1 MCP23017 4 DIP28 Socket 4 CD74HC4067 16 Channel Analog Multiplexer 1 Screw Terminal 2-pin 2 IDC16 Male Pin PCB Socket 10 RJ45 Ethernet Socket 2x8 Ports 1 LD1117V33 Linear Voltage Regulator 3.3V 1 Molex male connector 3-pin 2 Micro switch button 4-pin 2 logic level converter 4-ch 5V to 3.3V 1 ESP32 DevKit module (30 pins version) 1 goldpins 2-lines 19 goldpins 1-line 10 Pin jumper 8 3.3K resistor 1 Goldpin socket 1-line 30 IDC16 flat ribbon cable (in cm) 50 IDC16 ribbon connector 10 W5500 ( only for Ethernet version ) 1","title":"Components"},{"location":"hardware/components/#bill-of-materials","text":"NAME AMOUNT DC Power Jack Plug Socket 2.1/5.5 1 MCP23017 4 DIP28 Socket 4 CD74HC4067 16 Channel Analog Multiplexer 1 Screw Terminal 2-pin 2 IDC16 Male Pin PCB Socket 10 RJ45 Ethernet Socket 2x8 Ports 1 LD1117V33 Linear Voltage Regulator 3.3V 1 Molex male connector 3-pin 2 Micro switch button 4-pin 2 logic level converter 4-ch 5V to 3.3V 1 ESP32 DevKit module (30 pins version) 1 goldpins 2-lines 19 goldpins 1-line 10 Pin jumper 8 3.3K resistor 1 Goldpin socket 1-line 30 IDC16 flat ribbon cable (in cm) 50 IDC16 ribbon connector 10 W5500 ( only for Ethernet version ) 1","title":"Bill of materials"},{"location":"hardware/wiring/","text":"[TODO: how to do wiring of boards - e.g. connect main board to io board] RJ45 ports connections It assumes RJ45 connector is using T568B termination. It means wires in connector are in order: orange-white orange green-white blue blue-white green brown-white brown Then wires usage is following: Color usage orange +5V orange-white GND blue digital in/out blue-white digital in/out green digital in/out green-white digital in/out brown PJON brown-white analog in","title":"Wiring"},{"location":"hardware/wiring/#rj45-ports-connections","text":"It assumes RJ45 connector is using T568B termination. It means wires in connector are in order: orange-white orange green-white blue blue-white green brown-white brown Then wires usage is following: Color usage orange +5V orange-white GND blue digital in/out blue-white digital in/out green digital in/out green-white digital in/out brown PJON brown-white analog in","title":"RJ45 ports connections"},{"location":"user-guide/configuration/","text":"RoomHub configurator installation Download latest version of RoomHub Configurator for your operating system: Linux MacOS Windows After extracting downloaded archive - executable file is located in bin/room-hub-configurator (for Un*x) or bin/room-hub-configurator.bat (for Windows). RoomHub configuration process Info If you have configured your RoomHub earlier - you may want to start with resetting devices configuration and/or WiFi connection . Make sure RoomHub has WiFi connection configured or using ethernet connection with W5500. Keep in mind that different firmware needs to be used for wired connection. Prepare configuration file . Run configurator to send configuration to RoomHub Linux bin/room-hub-configurator your-file.roomhub.yml MacOS bin/room-hub-configurator your-file.roomhub.yml Windows bin/room-hub-configurator.bat your-file.roomhub.yml Observe logs to check if configuration has been applied successfully. RoomHub will be automatically restarted if configuration has been finished. In case of errors you can correct configuration file and run configurator again without restarting RoomHub. You can subscribe to MQTT topic homie/YourRoomHubName/# to see if RoomHub has correctly started with new configuration. [TODO: add asciinema showing configuration process] RoomHub configuration file RoomHub configuration file is written in YAML format. You can use basic text editor to create this file, but if you are using more advanced editor (like VSCode ) then you can use JSON schema for autocompletion and validation. The structure of the file is like: your-file.roomhub.yml configVersion : \"3.0\" # version of this config file format (leave unchanged) name : \"YourRoomHubName\" # name of RoomHub used in MQTT topic destinationIpAddress : \"192.168.1.66\" # IP of RoomHub (e.g. from EspTouch) mqttHostname : \"192.168.1.52\" ## address of MQTT server network : # Ethernet configuration - put anything when running on WiFi macAddress : \"6D:CB:54:AD:E9:93\" ipAddress : \"192.168.1.66\" rooms : # list of rooms - name : \"bathroom\" points : # list of points - name : \"bathroom light switch box\" portNumber : 1 devices : # list of devices - name : \"bathroom light\" # name of device id : 1 # identifier of device (unique in this configuration file) wires : [ \"BLUE\" ] # list of ethernet wires used for connection type : RELAY # type of device - name : \"bathroom light switch\" id : 2 wires : [ \"BLUE_WHITE\" ] type : SWITCH_BUTTON config : # some devices has additional config options debounceMs : 50 See naming convention page to find explanation of terms like \"point\". Reset devices configuration To reset configuration (device name, MQTT hostname and devices) keep button 2 (on Mainboard) pressed for 5 seconds when restarting RoomHub. Make sure RoomHub is connected to power socket Keep button 2 pressed on mainboard (see image below) Reset RoomHub by shortly pressing EN button on ESP32 Release button 2 when blue LED will start blinking on ESP32 ESP32 will indicate configuration reset by blinking 3 times with blue LED. After configuration reset, RoomHub will restart and start server waiting for new configuration. WiFi configuration WiFi configuration is done with ESP Touch Smart Config You need Android or iOS smartphone to configure WiFi on RoomHub. First reset existing RoomHub WiFi configuration and then configure it with app on your mobile. Reset WiFi configuration To reset WiFi setup, keep button 1 on mainboard pressed for 5 seconds when restarting RoomHub. Make sure RoomHub is connected to power socket Keep button 1 pressed on mainboard ( see image ) Reset RoomHub by pushing \"EN\" button on ESP32 for a moment Release button 1 when blue LED will start blinking on ESP32 ESP32 will indicate WiFi configuration reset by blinking 5 times with blue LED. After WiFi configuration reset, RoomHub will restart and start in ESP Smart Config WiFi mode. Android Install EspTouch from Google Play. Connect your phone to WiFi network you want RoomHub to be connected to Open EspTouch and insert password Press \"confirm\" After around 30 seconds you should get success message with IP address of RoomHub - store this IP address for later iPhone (iOS) Install Espressif Esptouch from App Store. Connect your phone to WiFi network you want RoomHub to be connected to Open EspTouch and insert password Press \"confirm\" After around 30 seconds you should get success message with IP address of RoomHub - store this IP address for later","title":"Configuration"},{"location":"user-guide/configuration/#roomhub-configurator-installation","text":"Download latest version of RoomHub Configurator for your operating system: Linux MacOS Windows After extracting downloaded archive - executable file is located in bin/room-hub-configurator (for Un*x) or bin/room-hub-configurator.bat (for Windows).","title":"RoomHub configurator installation"},{"location":"user-guide/configuration/#roomhub-configuration-process","text":"Info If you have configured your RoomHub earlier - you may want to start with resetting devices configuration and/or WiFi connection . Make sure RoomHub has WiFi connection configured or using ethernet connection with W5500. Keep in mind that different firmware needs to be used for wired connection. Prepare configuration file . Run configurator to send configuration to RoomHub Linux bin/room-hub-configurator your-file.roomhub.yml MacOS bin/room-hub-configurator your-file.roomhub.yml Windows bin/room-hub-configurator.bat your-file.roomhub.yml Observe logs to check if configuration has been applied successfully. RoomHub will be automatically restarted if configuration has been finished. In case of errors you can correct configuration file and run configurator again without restarting RoomHub. You can subscribe to MQTT topic homie/YourRoomHubName/# to see if RoomHub has correctly started with new configuration. [TODO: add asciinema showing configuration process]","title":"RoomHub configuration process"},{"location":"user-guide/configuration/#roomhub-configuration-file","text":"RoomHub configuration file is written in YAML format. You can use basic text editor to create this file, but if you are using more advanced editor (like VSCode ) then you can use JSON schema for autocompletion and validation. The structure of the file is like: your-file.roomhub.yml configVersion : \"3.0\" # version of this config file format (leave unchanged) name : \"YourRoomHubName\" # name of RoomHub used in MQTT topic destinationIpAddress : \"192.168.1.66\" # IP of RoomHub (e.g. from EspTouch) mqttHostname : \"192.168.1.52\" ## address of MQTT server network : # Ethernet configuration - put anything when running on WiFi macAddress : \"6D:CB:54:AD:E9:93\" ipAddress : \"192.168.1.66\" rooms : # list of rooms - name : \"bathroom\" points : # list of points - name : \"bathroom light switch box\" portNumber : 1 devices : # list of devices - name : \"bathroom light\" # name of device id : 1 # identifier of device (unique in this configuration file) wires : [ \"BLUE\" ] # list of ethernet wires used for connection type : RELAY # type of device - name : \"bathroom light switch\" id : 2 wires : [ \"BLUE_WHITE\" ] type : SWITCH_BUTTON config : # some devices has additional config options debounceMs : 50 See naming convention page to find explanation of terms like \"point\".","title":"RoomHub configuration file"},{"location":"user-guide/configuration/#reset-devices-configuration","text":"To reset configuration (device name, MQTT hostname and devices) keep button 2 (on Mainboard) pressed for 5 seconds when restarting RoomHub. Make sure RoomHub is connected to power socket Keep button 2 pressed on mainboard (see image below) Reset RoomHub by shortly pressing EN button on ESP32 Release button 2 when blue LED will start blinking on ESP32 ESP32 will indicate configuration reset by blinking 3 times with blue LED. After configuration reset, RoomHub will restart and start server waiting for new configuration.","title":"Reset devices configuration"},{"location":"user-guide/configuration/#wifi-configuration","text":"WiFi configuration is done with ESP Touch Smart Config You need Android or iOS smartphone to configure WiFi on RoomHub. First reset existing RoomHub WiFi configuration and then configure it with app on your mobile.","title":"WiFi configuration"},{"location":"user-guide/configuration/#reset-wifi-configuration","text":"To reset WiFi setup, keep button 1 on mainboard pressed for 5 seconds when restarting RoomHub. Make sure RoomHub is connected to power socket Keep button 1 pressed on mainboard ( see image ) Reset RoomHub by pushing \"EN\" button on ESP32 for a moment Release button 1 when blue LED will start blinking on ESP32 ESP32 will indicate WiFi configuration reset by blinking 5 times with blue LED. After WiFi configuration reset, RoomHub will restart and start in ESP Smart Config WiFi mode.","title":"Reset WiFi configuration"},{"location":"user-guide/configuration/#android","text":"Install EspTouch from Google Play. Connect your phone to WiFi network you want RoomHub to be connected to Open EspTouch and insert password Press \"confirm\" After around 30 seconds you should get success message with IP address of RoomHub - store this IP address for later","title":"Android"},{"location":"user-guide/configuration/#iphone-ios","text":"Install Espressif Esptouch from App Store. Connect your phone to WiFi network you want RoomHub to be connected to Open EspTouch and insert password Press \"confirm\" After around 30 seconds you should get success message with IP address of RoomHub - store this IP address for later","title":"iPhone (iOS)"},{"location":"user-guide/integration/","text":"This page describes how to configure home automation applications (like Home Assistant and OpenHab) to integrate them and control devices connected to RoomHub. General communication RoomHub works as a MQTT gateway. This means you can integrate it to any home automation platform which supports MQTT devices. Both Home Assistant and RoomHub have solid support for MQTT. RoomHub follows Homie convention 3.0.1 for MQTT communication. Homies MQTT topic layout follows the pattern homie/device/node/property . Device is a name of your RoomHub (see how to set name in configuration ). Node is a unique number identifier of the sensor/controller connected to RoomHub ( id in configuration ). Property can be a \"temperature\" when reading value from BME280 module or \"state\" in case of PIR motion sensor. Examples: homie/MyRoomHub/2/temperature for reading temperature from BME280 on id = 2 homie/MyRoomHub/5/humidity for reading humidity from BME280 on id = 5 homie/MyRoomHub/7/state for reading motion sensor state on id = 7 ( 1 if motion has been captured, 0 otherwise) When device supports setting a value (e.g. relay), desired value should be send to homie/device/node/property/set topic Example: send ON to homie/MyRoomHub/3/state/set to switch on light connected to relay on id = 3 OpenHab Although RoomHub follows Homie convention 3.0.1 and OpenHab claims to support auto-discovery of devices following this convention, there are some incompatibilities. As of OpenHab 2.4.0 using MQTT Homie Binding is not recommended. For now - recommended way is to use MQTT Binding 1.x and configure all devices in text files. You need to add OpenHab items in the configuration files with proper MQTT topic to send/receive messages to/from RoomHub. Example below shows configuration of relay module (with id = 1) connected to RoomHub which enables you to control the light. Switch light_Bedroom_Main \"Bedroom light\" <light> {mqtt=\">[mymqtt:homie/MyRoomHub/1/state/set:command:ON:ON],>[mymqtt:homie/MyRoomHub/1/state/set:command:OFF:OFF]\"} Example below shows configuration of motion sensor (with id = 14) connected to RoomHub. Switch motionSensor_Corridor \"Motion sensor in corridor\" {mqtt=\"<[mymqtt:homie/MyRoomHub/14/state:command:ON:1],<[mymqtt:homie/MyRoomHub/14/state:command:OFF:0\"} Home Assistant Home Assistant 0.104.3 does not support Homie convention with discovery feature. That means you need to manually configure devices connected to RoomHub. Fortunately, this is quite easy. Example below shows configuration of relay module (with id = 1) connected to RoomHub which enables you to control the light. switch : - platform : mqtt name : \"Bedroom Light\" state_topic : \"homie/MyRoomHub/1/state\" command_topic : \"homie/MyRoomHub/1/state/set\" retain : true Example below shows configuration of motion sensor (with id = 14) connected to RoomHub. binary_sensor : - platform : mqtt name : \"Motion sensor in corridor\" state_topic : \"homie/MyRoomHub/14/state\" payload_on : 1 payload_off : 0","title":"Integration"},{"location":"user-guide/integration/#general-communication","text":"RoomHub works as a MQTT gateway. This means you can integrate it to any home automation platform which supports MQTT devices. Both Home Assistant and RoomHub have solid support for MQTT. RoomHub follows Homie convention 3.0.1 for MQTT communication. Homies MQTT topic layout follows the pattern homie/device/node/property . Device is a name of your RoomHub (see how to set name in configuration ). Node is a unique number identifier of the sensor/controller connected to RoomHub ( id in configuration ). Property can be a \"temperature\" when reading value from BME280 module or \"state\" in case of PIR motion sensor. Examples: homie/MyRoomHub/2/temperature for reading temperature from BME280 on id = 2 homie/MyRoomHub/5/humidity for reading humidity from BME280 on id = 5 homie/MyRoomHub/7/state for reading motion sensor state on id = 7 ( 1 if motion has been captured, 0 otherwise) When device supports setting a value (e.g. relay), desired value should be send to homie/device/node/property/set topic Example: send ON to homie/MyRoomHub/3/state/set to switch on light connected to relay on id = 3","title":"General communication"},{"location":"user-guide/integration/#openhab","text":"Although RoomHub follows Homie convention 3.0.1 and OpenHab claims to support auto-discovery of devices following this convention, there are some incompatibilities. As of OpenHab 2.4.0 using MQTT Homie Binding is not recommended. For now - recommended way is to use MQTT Binding 1.x and configure all devices in text files. You need to add OpenHab items in the configuration files with proper MQTT topic to send/receive messages to/from RoomHub. Example below shows configuration of relay module (with id = 1) connected to RoomHub which enables you to control the light. Switch light_Bedroom_Main \"Bedroom light\" <light> {mqtt=\">[mymqtt:homie/MyRoomHub/1/state/set:command:ON:ON],>[mymqtt:homie/MyRoomHub/1/state/set:command:OFF:OFF]\"} Example below shows configuration of motion sensor (with id = 14) connected to RoomHub. Switch motionSensor_Corridor \"Motion sensor in corridor\" {mqtt=\"<[mymqtt:homie/MyRoomHub/14/state:command:ON:1],<[mymqtt:homie/MyRoomHub/14/state:command:OFF:0\"}","title":"OpenHab"},{"location":"user-guide/integration/#home-assistant","text":"Home Assistant 0.104.3 does not support Homie convention with discovery feature. That means you need to manually configure devices connected to RoomHub. Fortunately, this is quite easy. Example below shows configuration of relay module (with id = 1) connected to RoomHub which enables you to control the light. switch : - platform : mqtt name : \"Bedroom Light\" state_topic : \"homie/MyRoomHub/1/state\" command_topic : \"homie/MyRoomHub/1/state/set\" retain : true Example below shows configuration of motion sensor (with id = 14) connected to RoomHub. binary_sensor : - platform : mqtt name : \"Motion sensor in corridor\" state_topic : \"homie/MyRoomHub/14/state\" payload_on : 1 payload_off : 0","title":"Home Assistant"},{"location":"user-guide/introduction/","text":"This section describes how RoomHub works and how it can be used for home automation. Why and when to use it? Typical smart home solution is based on multiple sensors and controllers distributed around the house (e.g. temperature, motion, light sensors, switch buttons, relays, buzzers). Central component of the system is home automation application like OpenHab or Home Assistant which allows you to set rules and control devices with graphical interface and mobile application. Binding those elements is usually done either with some vendor gateway (e.g. Z-Wave Gateway) or by connecting sensors to microcontroller (e.g. ESP8266, Arduino) which communicates with home automation application. The problem with the vendor gateway solution is these are mostly only wireless and often closed solution. This unfortunately means - monitoring and changing batteries (plus a lot of radio waves around the house). Additionally, vendor sensors are relatively expensive comparing to the bare modules which can be used with Arduino. Connecting sensor to Arduino or similar microcontroller will save a lot of money on sensors, because you can use cheap, ready-to-use modules, but you still need to send data from microcontroller to home automation application. This can be done wireless (WiFi or RF), but it gets us back to the problem with batteries and radio noise. Even if you add wired connection (e.g. ethernet) to microcontroller, having single microcontroller for each one or two sensors is not very cost-effective. Problems described above are the ones RoomHub is trying to solve. Single RoomHub allows to connect: up to 64 digital input/output devices (like relays or switch buttons) and up to 16 analog input devices and up to 255 devices with PJON protocol. List of supported devices can be found on supported devices page. RoomHub supports cheap modules which work with Arduino microcontrollers, including relay modules, buttons and temperature sensors. RoomHub works with wired sensors and controllers to avoid problem with batteries and radio noise. Additionally, if you want to connect devices to RoomHub - you are not expected to know anything about programming. All you need to prepare is a YAML configuration file . Conclusion is that RoomHub is for you if you: Want to save money on sensors and controllers. Prefer wired over wireless components. Like to limit number of microcontrollers for sensors. Don't want to program Arduino microcontrollers yourself. Composition Heart of the RoomHub is ESP32 microcontroller. It controls all connected devices and communicates with home automation application through MQTT broker. This communication is done either using build-in WiFi adapter or with additional ethernet controller (W5500). Find out more about hardware and board layout in hardware section . Devices can be connected through sixteen RJ45 ports. Each RJ45 port provides: power (+5V and GND) 4 digital input/output wires 1 analog input wire 1 PJON wire Look at wiring in hardware section if you want to know more. Wiring examples As mentioned earlier, common home automation system consists of multiple sensors distributed around the house. You need to connect those to home automation application which is running on a computer connected to home network. Simple relay or temperature sensor modules (e.g. DTH22) do not have WiFi or Ethernet port. Instead, they can be controller (or send information) with single digital wire. RoomHub will work as a proxy between those sensors and home automation application. For the communication layer it uses MQTT broker which is supported by most of the open home automation applications (including OpenHab and Home Assistant). One example usage is when you have module of 4 relays controlling lights in your house. Then you need to use single RJ45 port of RoomHub. Orange and white-orange wires will power your relay module with 5V. Use blue, white-blue, green and white-green wires to control relay states. Another example is to read state from PIR motion sensor module. Take an ethernet cable plugged into RoomHub RJ45 port and use orange and white-orange wires to power the module. Then use any of available digital wires (green, white-green, blue or white-blue) for output connection. When wiring is ready then you need to send configuration in YAML file to tell RoomHub what kind of module is connected to which RJ45 port and on which wire colour. What's next? Quick start","title":"Introduction"},{"location":"user-guide/introduction/#why-and-when-to-use-it","text":"Typical smart home solution is based on multiple sensors and controllers distributed around the house (e.g. temperature, motion, light sensors, switch buttons, relays, buzzers). Central component of the system is home automation application like OpenHab or Home Assistant which allows you to set rules and control devices with graphical interface and mobile application. Binding those elements is usually done either with some vendor gateway (e.g. Z-Wave Gateway) or by connecting sensors to microcontroller (e.g. ESP8266, Arduino) which communicates with home automation application. The problem with the vendor gateway solution is these are mostly only wireless and often closed solution. This unfortunately means - monitoring and changing batteries (plus a lot of radio waves around the house). Additionally, vendor sensors are relatively expensive comparing to the bare modules which can be used with Arduino. Connecting sensor to Arduino or similar microcontroller will save a lot of money on sensors, because you can use cheap, ready-to-use modules, but you still need to send data from microcontroller to home automation application. This can be done wireless (WiFi or RF), but it gets us back to the problem with batteries and radio noise. Even if you add wired connection (e.g. ethernet) to microcontroller, having single microcontroller for each one or two sensors is not very cost-effective. Problems described above are the ones RoomHub is trying to solve. Single RoomHub allows to connect: up to 64 digital input/output devices (like relays or switch buttons) and up to 16 analog input devices and up to 255 devices with PJON protocol. List of supported devices can be found on supported devices page. RoomHub supports cheap modules which work with Arduino microcontrollers, including relay modules, buttons and temperature sensors. RoomHub works with wired sensors and controllers to avoid problem with batteries and radio noise. Additionally, if you want to connect devices to RoomHub - you are not expected to know anything about programming. All you need to prepare is a YAML configuration file . Conclusion is that RoomHub is for you if you: Want to save money on sensors and controllers. Prefer wired over wireless components. Like to limit number of microcontrollers for sensors. Don't want to program Arduino microcontrollers yourself.","title":"Why and when to use it?"},{"location":"user-guide/introduction/#composition","text":"Heart of the RoomHub is ESP32 microcontroller. It controls all connected devices and communicates with home automation application through MQTT broker. This communication is done either using build-in WiFi adapter or with additional ethernet controller (W5500). Find out more about hardware and board layout in hardware section . Devices can be connected through sixteen RJ45 ports. Each RJ45 port provides: power (+5V and GND) 4 digital input/output wires 1 analog input wire 1 PJON wire Look at wiring in hardware section if you want to know more.","title":"Composition"},{"location":"user-guide/introduction/#wiring-examples","text":"As mentioned earlier, common home automation system consists of multiple sensors distributed around the house. You need to connect those to home automation application which is running on a computer connected to home network. Simple relay or temperature sensor modules (e.g. DTH22) do not have WiFi or Ethernet port. Instead, they can be controller (or send information) with single digital wire. RoomHub will work as a proxy between those sensors and home automation application. For the communication layer it uses MQTT broker which is supported by most of the open home automation applications (including OpenHab and Home Assistant). One example usage is when you have module of 4 relays controlling lights in your house. Then you need to use single RJ45 port of RoomHub. Orange and white-orange wires will power your relay module with 5V. Use blue, white-blue, green and white-green wires to control relay states. Another example is to read state from PIR motion sensor module. Take an ethernet cable plugged into RoomHub RJ45 port and use orange and white-orange wires to power the module. Then use any of available digital wires (green, white-green, blue or white-blue) for output connection. When wiring is ready then you need to send configuration in YAML file to tell RoomHub what kind of module is connected to which RJ45 port and on which wire colour.","title":"Wiring examples"},{"location":"user-guide/introduction/#whats-next","text":"Quick start","title":"What's next?"},{"location":"user-guide/naming-convention/","text":"Homie device - same as RoomHub - it is not the same as \"device\" (see below) Device - sensor or controller connected to RoomHub (e.g. relay module or switch button) PJON Controller - Additional controller (e.g. Arduino Pro Mini) used to provide communication with RoomHub, for devices which are using other communication channels than simple digital or analog wire (e.g. serial, I2C or 1-Wire). Point - each place connected to RoomHub with single ethernet/UTP cable, can have many devices connected to it Room - space containing multiple points, it helps divide configuration into logical parts, but has currently no other influence after configuration is send to RoomHub (e.g. kitchen which has multiple light switches) Wire - single wire of UTP cable which may be use to connect one (digital/analog) or multiple (PJON) devices.","title":"Naming convention"},{"location":"user-guide/quick-start/","text":"Info This quick start guide assumes you have RoomHub hardware ready. If you are looking for how to prepare the hardware - look into hardware section . Quick start guide shows how to connect relay module and configure RoomHub to control it. Connecting other types of devices is similar and can be done with the similar steps. What do you need Assembled Aetas RoomHub 3 with 5v power supply cable PlatformIO installed (if your RoomHub doesn't have firmware installed) WiFi network Mobile phone (Android or iOS) Running MQTT broker (e.g. Mosquitto ) MQTT client installed on your computer (e.g. MQTT.js ) Ethernet cable (with connector on one side only) relay module Connect and configure device Warning Make sure RoomHub is never connected to power supply and USB port at the same time. This will destroy the device and may damage your computer. Install RoomHub firmware (see instruction ). Connect RoomHub to power supply (make sure it is not connected to USB). Keep button 1 pressed on RoomHub and restart it by pressing \"EN\" button on ESP32. Keep button 1 pressed until blue LED will blink 3 times (around 5 seconds). Use EspTouch to connect RoomHub to your WiFi network ( Google Play or Apple Store ) - more Connect your phone to the WiFi network you want RoomHub to be connected to Put your WiFi password in the EspTouch application Press \"Confirm\" in the app After around 30 seconds you should get success message with IP address of RoomHub - store this IP address for later Prepare ethernet cable with connector on one side (according to standard T568B) Connect relay module to ethernet cable ( photo ) module pin wire color VCC/DC+ orange ground/DC- orange-white control/IN blue Connect module to RoomHub port 1 ( ports ) Prepare configuration file test.roomhub.yml - look into comments to find out which value to change configVersion : \"3.0\" name : \"TestRoomHub\" destinationIpAddress : \"192.168.1.66\" # set IP of RoomHub (see point 4.d.) mqttHostname : \"192.168.1.52\" # set IP of your MQTT broker network : # only for Ethernet - leave as it is for WiFi connection macAddress : \"6D:CB:54:AD:E9:93\" ipAddress : \"0.0.0.0\" rooms : - name : \"workshop\" points : - name : \"point with test relay\" portNumber : 1 devices : - name : \"test relay\" id : 1 wires : [ \"BLUE\" ] type : RELAY For more details on configuration files see configuration page . Apply configuration with configurator Download latest version of RoomHub Configurator for Linux , MacOS or Windows Extract archive Run Configurator CLI with command (make sure path to test.roomhub.yml is correct) Linux bin/room-hub-configurator /home/john/test.roomhub.yml MacOS bin/room-hub-configurator /Users/john/test.roomhub.yml Windows bin \\r oom-hub-configurator.bat C:/test.roomhub.yml Sample output ____ __ __ __ / __ \\ ____ ____ ____ ___ / / / / _ __ / / _ / / _ / / __ \\ / __ \\ / __ ` __ \\ / / _ / / / / / __ \\ / _ , _ / / _ / / / _ / / / / / / / __ / / _ / / / _ / / / _ / | _ | \\ ____ / \\ ____ / _ / / _ / / _ / _ / / _ / \\ __ , _ / _ . ___ / Starting RoomHubConfiguratorApplicationKt on desktop with PID 22499 ( started by user in / home / john / room-hub-configurator-0 . 1 . 0-alpha . 20-linux / room-hub-configurator-linux ) No active profile set , falling back to default profiles : default Devtools property defaults active ! Set 'spring.devtools.add-properties' to 'false' to disable LiveReload server is running on port 35729 Started RoomHubConfiguratorApplicationKt in 1 . 26 seconds ( JVM running for 1 . 663 ) JSON schema validation succeeded \u2714 Application validation succeeded \u2714 Setting RoomHub name to 'TestRoomHub' Sending network configuration '6D:CB:54:AD:E9:93;0.0.0.0;;;;' Setting MQTT hostname to '10.0.88.100' Sending device configuration '1.0;1;test relay;2;1;4;0;0' Finalizing RoomHub configuration RoomHub configured correctly Subscribe to MQTT topic to see device has been initialized (replace IP address with your MQTT broker address) mqtt sub -t 'homie/TestRoomHub/#' -h '192.168.1.52' -v Sample output homie/TestRoomHub/$homie 3.0.1 homie/TestRoomHub/$name TestRoomHub homie/TestRoomHub/$nodes 1 homie/TestRoomHub/$implementation Aetas homie/TestRoomHub/$fw/name Aetas RoomHub homie/TestRoomHub/$fw/version 3.1.0-dev.13-WIFI homie/TestRoomHub/$localip 10.0.88.82 homie/TestRoomHub/$mac 3C:71:BF:59:34:34 homie/TestRoomHub/$stats uptime,signal,freeheap homie/TestRoomHub/$stats/interval 30 homie/TestRoomHub/$stats/uptime 1198 homie/TestRoomHub/$stats/signal 88 homie/TestRoomHub/$stats/freeheap 248064 homie/TestRoomHub/$state ready homie/TestRoomHub/1/$name test relay homie/TestRoomHub/1/$type DigitalOutput homie/TestRoomHub/1/$properties state homie/TestRoomHub/1/state/$name state homie/TestRoomHub/1/state/$settable true homie/TestRoomHub/1/state/$retained true homie/TestRoomHub/1/state/$datatype enum homie/TestRoomHub/1/state/$format ON,OFF Send MQTT message to switch relay state (replace IP address with your MQTT broker address) mqtt pub -t 'homie/TestRoomHub/1/state/set' -h '192.168.1.52' -m 'ON' State of the relay should change. Congratulation! You have just configured your first device on RoomHub. What's next? Read full user guide starting with naming conventions Find out all supported devices","title":"Quick Start"},{"location":"user-guide/quick-start/#what-do-you-need","text":"Assembled Aetas RoomHub 3 with 5v power supply cable PlatformIO installed (if your RoomHub doesn't have firmware installed) WiFi network Mobile phone (Android or iOS) Running MQTT broker (e.g. Mosquitto ) MQTT client installed on your computer (e.g. MQTT.js ) Ethernet cable (with connector on one side only) relay module","title":"What do you need"},{"location":"user-guide/quick-start/#connect-and-configure-device","text":"Warning Make sure RoomHub is never connected to power supply and USB port at the same time. This will destroy the device and may damage your computer. Install RoomHub firmware (see instruction ). Connect RoomHub to power supply (make sure it is not connected to USB). Keep button 1 pressed on RoomHub and restart it by pressing \"EN\" button on ESP32. Keep button 1 pressed until blue LED will blink 3 times (around 5 seconds). Use EspTouch to connect RoomHub to your WiFi network ( Google Play or Apple Store ) - more Connect your phone to the WiFi network you want RoomHub to be connected to Put your WiFi password in the EspTouch application Press \"Confirm\" in the app After around 30 seconds you should get success message with IP address of RoomHub - store this IP address for later Prepare ethernet cable with connector on one side (according to standard T568B) Connect relay module to ethernet cable ( photo ) module pin wire color VCC/DC+ orange ground/DC- orange-white control/IN blue Connect module to RoomHub port 1 ( ports ) Prepare configuration file test.roomhub.yml - look into comments to find out which value to change configVersion : \"3.0\" name : \"TestRoomHub\" destinationIpAddress : \"192.168.1.66\" # set IP of RoomHub (see point 4.d.) mqttHostname : \"192.168.1.52\" # set IP of your MQTT broker network : # only for Ethernet - leave as it is for WiFi connection macAddress : \"6D:CB:54:AD:E9:93\" ipAddress : \"0.0.0.0\" rooms : - name : \"workshop\" points : - name : \"point with test relay\" portNumber : 1 devices : - name : \"test relay\" id : 1 wires : [ \"BLUE\" ] type : RELAY For more details on configuration files see configuration page . Apply configuration with configurator Download latest version of RoomHub Configurator for Linux , MacOS or Windows Extract archive Run Configurator CLI with command (make sure path to test.roomhub.yml is correct) Linux bin/room-hub-configurator /home/john/test.roomhub.yml MacOS bin/room-hub-configurator /Users/john/test.roomhub.yml Windows bin \\r oom-hub-configurator.bat C:/test.roomhub.yml Sample output ____ __ __ __ / __ \\ ____ ____ ____ ___ / / / / _ __ / / _ / / _ / / __ \\ / __ \\ / __ ` __ \\ / / _ / / / / / __ \\ / _ , _ / / _ / / / _ / / / / / / / __ / / _ / / / _ / / / _ / | _ | \\ ____ / \\ ____ / _ / / _ / / _ / _ / / _ / \\ __ , _ / _ . ___ / Starting RoomHubConfiguratorApplicationKt on desktop with PID 22499 ( started by user in / home / john / room-hub-configurator-0 . 1 . 0-alpha . 20-linux / room-hub-configurator-linux ) No active profile set , falling back to default profiles : default Devtools property defaults active ! Set 'spring.devtools.add-properties' to 'false' to disable LiveReload server is running on port 35729 Started RoomHubConfiguratorApplicationKt in 1 . 26 seconds ( JVM running for 1 . 663 ) JSON schema validation succeeded \u2714 Application validation succeeded \u2714 Setting RoomHub name to 'TestRoomHub' Sending network configuration '6D:CB:54:AD:E9:93;0.0.0.0;;;;' Setting MQTT hostname to '10.0.88.100' Sending device configuration '1.0;1;test relay;2;1;4;0;0' Finalizing RoomHub configuration RoomHub configured correctly Subscribe to MQTT topic to see device has been initialized (replace IP address with your MQTT broker address) mqtt sub -t 'homie/TestRoomHub/#' -h '192.168.1.52' -v Sample output homie/TestRoomHub/$homie 3.0.1 homie/TestRoomHub/$name TestRoomHub homie/TestRoomHub/$nodes 1 homie/TestRoomHub/$implementation Aetas homie/TestRoomHub/$fw/name Aetas RoomHub homie/TestRoomHub/$fw/version 3.1.0-dev.13-WIFI homie/TestRoomHub/$localip 10.0.88.82 homie/TestRoomHub/$mac 3C:71:BF:59:34:34 homie/TestRoomHub/$stats uptime,signal,freeheap homie/TestRoomHub/$stats/interval 30 homie/TestRoomHub/$stats/uptime 1198 homie/TestRoomHub/$stats/signal 88 homie/TestRoomHub/$stats/freeheap 248064 homie/TestRoomHub/$state ready homie/TestRoomHub/1/$name test relay homie/TestRoomHub/1/$type DigitalOutput homie/TestRoomHub/1/$properties state homie/TestRoomHub/1/state/$name state homie/TestRoomHub/1/state/$settable true homie/TestRoomHub/1/state/$retained true homie/TestRoomHub/1/state/$datatype enum homie/TestRoomHub/1/state/$format ON,OFF Send MQTT message to switch relay state (replace IP address with your MQTT broker address) mqtt pub -t 'homie/TestRoomHub/1/state/set' -h '192.168.1.52' -m 'ON' State of the relay should change. Congratulation! You have just configured your first device on RoomHub.","title":"Connect and configure device"},{"location":"user-guide/quick-start/#whats-next","text":"Read full user guide starting with naming conventions Find out all supported devices","title":"What's next?"},{"location":"user-guide/supported-devices/","text":"This is a list of devices currently supported by RoomHub. That means you can connect device either with digital, analog or PJON connection to RoomHub and configure it with RoomHub Configurator. All supported devices need to be compatible with 5V power supply. The name in the parenthesis in the header is used in configuration [TODO: add configuration examples to each device] Digital devices Relay module Relay module which allows to control turning on/off electrical devices and lights. Controlled with LOW signal. configuration type: RELAY additional configuration: NONE Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"point with relay\" portNumber : 1 devices : - name : \"relay name\" id : 1 wires : [ \"BLUE\" ] type : RELAY Switch button Switch button or push button. configuration type: SWITCH_BUTTON additional configuration: debounceMs [default: 0] - number of milliseconds for debounce (helps to avoid flickering) Emulated switch Emulates switch button press with changing digital output from HIGH to LOW for 500ms and back to HIGH state. It is useful for controlling devices which has possibility to connect switch button (e.g. garage gate opener). configuration type: EMULATED_SWITCH additional configuration: NONE Motion detector PIR Motion Sensor/Detector. configuration type: MOTION_DETECTOR additional configuration: debounceMs [default: 0] - number of milliseconds for debounce (helps to avoid flickering) Digital input General purpose single digital input. Can be used for measuring state on any digital input. Works for devices like buttons (prefer SWITCH_BUTTON ) or motion sensor (prefer MOTION_DETECTOR ). configuration type: DIGITAL_INPUT additional configuration: debounceMs [default: 0] - number of milliseconds for debounce (helps to avoid flickering) Digital output General purpose single digital output. Can be used for generating digital signal on single wire. Works for devices like relay (prefer RELAY ). configuration type: DIGITAL_OUTPUT additional configuration: NONE Analog devices SCT013 Non-invasive AC Current Sensor (SCT-013-000). It allows to measure current. configuration type: SCT013 additional configuration: NONE PJON devices This group of devices requires PJON controller on the side of the device for communication with RoomHub. BME280 Temperature and humidity sensor. Requires PJON controller. configuration type: BME280 additional configuration: pjonId [default: 0] - PJON controller identifier on PJON bus (0 means it will be assigned automatically) [TODO: do we support automatic assignment in current version?] Support planned in the next version DHT22 ( DHT22 ) GitHub issue #12 Temperature and humidity sensor.","title":"Supported devices"},{"location":"user-guide/supported-devices/#digital-devices","text":"","title":"Digital devices"},{"location":"user-guide/supported-devices/#relay-module","text":"Relay module which allows to control turning on/off electrical devices and lights. Controlled with LOW signal. configuration type: RELAY additional configuration: NONE Example configuration [ ... ] rooms : - name : \"workshop\" points : - name : \"point with relay\" portNumber : 1 devices : - name : \"relay name\" id : 1 wires : [ \"BLUE\" ] type : RELAY","title":"Relay module"},{"location":"user-guide/supported-devices/#switch-button","text":"Switch button or push button. configuration type: SWITCH_BUTTON additional configuration: debounceMs [default: 0] - number of milliseconds for debounce (helps to avoid flickering)","title":"Switch button"},{"location":"user-guide/supported-devices/#emulated-switch","text":"Emulates switch button press with changing digital output from HIGH to LOW for 500ms and back to HIGH state. It is useful for controlling devices which has possibility to connect switch button (e.g. garage gate opener). configuration type: EMULATED_SWITCH additional configuration: NONE","title":"Emulated switch"},{"location":"user-guide/supported-devices/#motion-detector","text":"PIR Motion Sensor/Detector. configuration type: MOTION_DETECTOR additional configuration: debounceMs [default: 0] - number of milliseconds for debounce (helps to avoid flickering)","title":"Motion detector"},{"location":"user-guide/supported-devices/#digital-input","text":"General purpose single digital input. Can be used for measuring state on any digital input. Works for devices like buttons (prefer SWITCH_BUTTON ) or motion sensor (prefer MOTION_DETECTOR ). configuration type: DIGITAL_INPUT additional configuration: debounceMs [default: 0] - number of milliseconds for debounce (helps to avoid flickering)","title":"Digital input"},{"location":"user-guide/supported-devices/#digital-output","text":"General purpose single digital output. Can be used for generating digital signal on single wire. Works for devices like relay (prefer RELAY ). configuration type: DIGITAL_OUTPUT additional configuration: NONE","title":"Digital output"},{"location":"user-guide/supported-devices/#analog-devices","text":"","title":"Analog devices"},{"location":"user-guide/supported-devices/#sct013","text":"Non-invasive AC Current Sensor (SCT-013-000). It allows to measure current. configuration type: SCT013 additional configuration: NONE","title":"SCT013"},{"location":"user-guide/supported-devices/#pjon-devices","text":"This group of devices requires PJON controller on the side of the device for communication with RoomHub.","title":"PJON devices"},{"location":"user-guide/supported-devices/#bme280","text":"Temperature and humidity sensor. Requires PJON controller. configuration type: BME280 additional configuration: pjonId [default: 0] - PJON controller identifier on PJON bus (0 means it will be assigned automatically) [TODO: do we support automatic assignment in current version?]","title":"BME280"},{"location":"user-guide/supported-devices/#support-planned-in-the-next-version","text":"","title":"Support planned in the next version"},{"location":"user-guide/supported-devices/#dht22-dht22-github-issue-12","text":"Temperature and humidity sensor.","title":"DHT22 (DHT22) GitHub issue #12"},{"location":"user-guide/troubleshooting/","text":"RoomHub cannot connect to MQTT, even when configured MQTT hostname is correct Some ESP32 modules have problems with connection client, probably because of some previously stored data. Currently the only proved workaround is to change firmware temporarily to call Client.flush(); . RoomHub disconnects from MQTT from time to time when RoomHub is connected via ethernet cable This is a known issue with W5500. Currently there is not known solutions for that. If you have encountered this problem - please use WiFi instead. We are tracking this problem in GitHub issue . Switch button doesn't work properly - sometimes it sends message multiple times even when pressed once Debounce value is too low. See Switch button in supported devices section for details.","title":"Troubleshooting"},{"location":"user-guide/troubleshooting/#roomhub-cannot-connect-to-mqtt-even-when-configured-mqtt-hostname-is-correct","text":"Some ESP32 modules have problems with connection client, probably because of some previously stored data. Currently the only proved workaround is to change firmware temporarily to call Client.flush(); .","title":"RoomHub cannot connect to MQTT, even when configured MQTT hostname is correct"},{"location":"user-guide/troubleshooting/#roomhub-disconnects-from-mqtt-from-time-to-time-when-roomhub-is-connected-via-ethernet-cable","text":"This is a known issue with W5500. Currently there is not known solutions for that. If you have encountered this problem - please use WiFi instead. We are tracking this problem in GitHub issue .","title":"RoomHub disconnects from MQTT from time to time when RoomHub is connected via ethernet cable"},{"location":"user-guide/troubleshooting/#switch-button-doesnt-work-properly-sometimes-it-sends-message-multiple-times-even-when-pressed-once","text":"Debounce value is too low. See Switch button in supported devices section for details.","title":"Switch button doesn't work properly - sometimes it sends message multiple times even when pressed once"}]}